"use strict";var main=function(){var time=0;var marsRotate=true;var marsRotation=0;var maxAnisotropy;var scene;var camera;var renderer;var controls;var sunlight;var geomSphere;var mars;var sun;var skybox;var matMars;init();initGUI();animate();function init(){scene=new THREE.Scene();camera=new THREE.PerspectiveCamera(60,window.innerWidth/window.innerHeight,0.001,200);camera.position.z=4.5;renderer=new THREE.WebGLRenderer();maxAnisotropy=renderer.capabilities.getMaxAnisotropy();renderer.setSize(window.innerWidth,window.innerHeight);document.body.appendChild(renderer.domElement);controls=new THREE.OrbitControls(camera);var textureLoader=new THREE.TextureLoader();var colorMapMars=textureLoader.load("maps/mars/mars.jpg");colorMapMars.anisotropy=maxAnisotropy;var normalMapMars=textureLoader.load("maps/mars/Blended_NRM.png");colorMapMars.anisotropy=maxAnisotropy;var displacementMapMars=textureLoader.load("maps/mars/Blended_DISP.jpg");var colorMapSkybox=textureLoader.load("maps/milkyway.jpg");colorMapSkybox.anisotropy=maxAnisotropy;matMars=new THREE.MeshPhongMaterial({color:0xaaaaaa,specular:0x000000,shininess:0,map:colorMapMars,normalMap:normalMapMars,displacementMap:displacementMapMars});var matSkybox=new THREE.MeshBasicMaterial({map:colorMapSkybox,side:THREE.BackSide});var matWhite=new THREE.MeshBasicMaterial({color:0xffffff});var geomCube=new THREE.BoxGeometry(1,1,1);var geomSkybox=new THREE.SphereGeometry(10,24,16);geomSphere=new THREE.SphereGeometry(1,300,200);sun=new THREE.Mesh(geomSphere,matWhite);sun.position.x=100;sun.position.y=0;scene.add(sun);skybox=new THREE.Mesh(geomSkybox,matSkybox);skybox.material.depthWrite=false;skybox.renderOrder=-999;scene.add(skybox);createMars(100);renderer.toneMappingExposure=2;sunlight=new THREE.PointLight(0xffffff,5,200,2);sunlight.position.x=100;scene.add(sunlight);window.addEventListener("resize",onWindowResize,false);} function animate(){requestAnimationFrame(animate);controls.update();time+=1;if(marsRotate){marsRotation+=0.003;mars.rotation.y=marsRotation;} skybox.position.x=camera.position.x;skybox.position.y=camera.position.y;skybox.position.z=camera.position.z;renderer.render(scene,camera);} function initGUI(){var gui=new dat.GUI({width:350});var oldVM=10;var effectController={"NormalMapScale":0.55,"DisplacementMapScale":0.05,"VertexMultiplier":100,"AnisotropicFiltering":maxAnisotropy,"Reset":function(){resetOptions()},"RotationMars":function(){toggleRotation()}};function resetOptions(){effectController.NormalMapScale=0.55;effectController.DisplacementMapScale=0.05;effectController.VertexMultiplier=100;recreateMars();normalMapScaleChanged();displacementMapScaleChanged();} function toggleRotation(){if(marsRotate){marsRotate=false;}else{marsRotate=true;}} function normalMapScaleChanged(){matMars.normalScale.set(effectController.NormalMapScale,effectController.NormalMapScale);} gui.add(effectController,"NormalMapScale",0.0,1.0,0.01).onChange(normalMapScaleChanged).name("Normal Map Scale").listen();function displacementMapScaleChanged(){matMars.displacementScale=effectController.DisplacementMapScale;} gui.add(effectController,"DisplacementMapScale",0.0,0.15,0.005).onChange(displacementMapScaleChanged).name("Displacement Map Scale").listen();function recreateMars(){if(oldVM!==effectController.VertexMultiplier){oldVM=effectController.VertexMultiplier;scene.remove(mars);mars=new THREE.Mesh(new THREE.SphereGeometry(1,effectController.VertexMultiplier*3,effectController.VertexMultiplier*2),matMars);mars.position.x=0;mars.position.y=0;mars.rotation.y=marsRotation;scene.add(mars);}} gui.add(effectController,"VertexMultiplier",5,250,5).onChange(recreateMars).name("Polygon Count Multiplier").listen();gui.add(effectController,"Reset").name("RESET");gui.add(effectController,"RotationMars").name("Rotation ON/OFF");function changeAnisotropy(){skybox.material.map.anisotropy=effectController.AnisotropicFiltering;mars.material.normalMap.anisotropy=effectController.AnisotropicFiltering;mars.material.map.anisotropy=effectController.AnisotropicFiltering;skybox.material.map.needsUpdate=true;mars.material.normalMap.needsUpdate=true;mars.material.map.needsUpdate=true;} gui.add(effectController,"AnisotropicFiltering",1,16,1).onChange(changeAnisotropy).listen();resetOptions();} function onWindowResize(){camera.aspect=window.innerWidth/window.innerHeight;camera.updateProjectionMatrix();renderer.setSize(window.innerWidth,window.innerHeight);} function createMars(vertexMult){mars=new THREE.Mesh(new THREE.SphereGeometry(1,vertexMult*3,vertexMult*2),matMars);mars.position.x=0;mars.position.y=0;mars.rotation.y=marsRotation;scene.add(mars);}};
